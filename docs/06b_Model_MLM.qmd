---
title: "06 Results"
author: "J Andres Gannon"
date: "March 4, 2018"
output:
  html_document:
    toc: yes
  html_notebook:
    toc: yes
    toc_float: yes
editor_options:
  chunk_output_type: inline
---
<style>
    body .main-container {
        max-width: 100%;
    }
</style>

# Set up
```{r}
library(magrittr)
library(tidyverse)
library(ggplot2)
```

Load the cleaned intervention data that only includes youngest children
```{r}
df <- readRDS(paste0(here::here(), "/data/","06a_model.rds"))
```

Quality check
```{r}
naniar::gg_miss_var(df)

# Log some vars
df %<>%
  dplyr::mutate(year_bayes = year - 1989,
                sideB_nonstate_all_log = log(sideB_nonstate_all_count + 1),
                duration_log = log(duration + 1),
                daysinto_parent_log = log(daysinto_parent + 1))
```

# Linear models
## Simple OLS

```{r}
m1 <- lm(unrisk_trunc ~
           disapproveL1 +
           sideB_nonstate_major_binary +
           urban_binary +
           TOTL_hostileL1 +
           demparty +
           presidentid +
           daysinto_parent_log +
           duration_log +
           mountainous +
           multilateral1,
         data = df)
```

## Parent FE
```{r}
m2 <- update(m1, . ~ . + parent_id)
```

## HLM
```{r}
m_parent <- lme4::lmer(unrisk_trunc ~
                         disapproveL1 +
                         sideB_nonstate_major_binary +
                         urban_binary +
                         TOTL_hostileL1 +
                         demparty +
                         presidentid +
                         daysinto_parent_log +
                         duration_log +
                         mountainous +
                         multilateral1 +
                         (1 | parent_id),
                       data = df,
                       REML = TRUE,
                       control = lme4::lmerControl(optimizer ="Nelder_Mead"))
```

HLM Diagnostics
```{r}
summary(m_parent)
confint(m_parent)

lmerTest::ranova(m_parent,
      ddf = "Kenward-Roger")
```

# Bayesian model
```{r, eval = FALSE}
# Set up
options(mc.cores = 12,  # Use 4 cores
        brms.backend = "cmdstanr")
bayes_seed <- 1234

# Model
m_bayes <- brms::brm(brms::bf(unrisk_trunc ~
                                approveL1 +
                                sideB_nonstate_major_binary +
                                urban_binary +
                                TOTL_hostileL1 +
                                demparty +
                                daysinto_parent_log +
                                duration_log +
                                mountainous +
                                multilateral1 +
                                (1 | parent_id)),
                          data = df,
                          control = list(adapt_delta = 0.95),
                          chains = 4,
                          seed = bayes_seed,
                          iter = 10000)

# Results
broom.mixed::tidy(m_bayes, effects = "fixed")
summary(m_bayes)

sjPlot::plot_model(m_bayes,
                   type = "std")

# See the parent level offsets
brms::ranef(m_bayes)$parent_id %>%
  dplyr::as_tibble(rownames = "parent_id") %>%
  dplyr::select(parent_id, dplyr::starts_with("Estimate"))
```

# Each MilStrat Models
```{r}
m_drones <- lme4::lmer(means_drones ~
                         disapproveL1 +
                         sideB_nonstate_major_binary +
                         urban_binary +
                         TOTL_hostileL1 +
                         demparty +
                         presidentid +
                         daysinto_parent_log +
                         duration_log +
                         mountainous +
                         multilateral1 +
                         (1 | parent_id),
                       data = df,
                       REML = TRUE,
                       control = lme4::lmerControl(optimizer ="Nelder_Mead"))

m_cruise <- update(m_drones, means_cruisemissiles ~ .)
m_air <- update(m_drones, means_aerialbombing ~ .)
m_cas <- update(m_drones, means_closeairsupport ~ .)
m_gro <- update(m_drones, means_groundtroops ~ .)
m_para <- update(m_drones, means_paramilitary ~ .)

models <- c(m_drones, m_cruise, m_air, m_cas, m_gro, m_para)

jtools::plot_coefs(models)
```

# Results
Table
```{r}
models <- list(m1, m2, m_parent)

texreg::texreg(models,
               stars = c(0.01, 0.05, 0.1),
               omit.coef = "(idQ)|(Intercept)|(presidentid)",
               custom.coef.names = c("Disapproval Rating",
                                     "Major Non-state Target",
                                     "Urban Target",
                                     "US Combat Casualties (lag)",
                                     "Democratic President",
                                     "Days into Parent Intervention (log)",
                                     "Duration (log)",
                                     "Mountainous",
                                     "Multilateral"),
               label = "table:model",
               float.pos = "h",
               use.packages = FALSE,
               file = paste0(here::here(), "/paper/figures/","model.tex"))
```

Figure
```{r}
sjPlot::plot_model(m_parent,
                   rm.terms = c("presidentid [Donald Trump, George Bush, George W. Bush, William J. Clinton]"),
                   axis.labels = c("Multilateral",
                                   "Mountainous",
                                   "Duration (log)",
                                   "Days into Parent Intervention (log)",
                                   "Democratic President",
                                   "US Combat Casualties (log)",
                                   "Urban Target",
                                   "Major Non-state Target",
                                   "Disapproval Rating"),
                   type = "std",
                   se = TRUE,
                   show.values = TRUE,
                   show.p = TRUE,
                   p.threshold = c(0.1, 0.05, 0.01),
                   value.offset = 0.35,
                   title = "Hierarchical Linear Model Coefficients") %>%
  sjPlot::save_plot(filename = paste0(here::here(),"/paper/figures/model_results.png"),
                    width = 18,
                    height = 18)
```

Marginal Effects
```{r}
margins::margins_summary(m_parent,
                         level = 0.05)


ggplot2::theme_set(sjPlot::theme_sjplot())
sjPlot::plot_model(m_parent,
                   type = "eff",
                   terms = c("disapproveL1", "sideB_nonstate_major_binary"),
                   title = "Independent Variable Marginal Effects",
                   p.threshold = 0.1,
                   legend.title = "Non-state Target") %>%
  sjPlot::save_plot(filename = paste0(here::here(), "/paper/figures/","marginal_effects.png"))
```

# Robustness checks
Model diagnostics
```{r}
performance::check_model(m_parent)

performance::performance_accuracy(m1)

performance::compare_performance(m1, m2, m_parent)
```